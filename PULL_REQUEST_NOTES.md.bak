 PULL_REQUEST_NOTES.md 
# City of Cape Town - DevOps Assessment Submission  
**Candidate:** Mkhanyisi Ndlanga  
**Date:** 12 October 2025  

---

## Summary of Implementation Approach  
- Containerized the Flask application using Docker and Docker Compose principles.  
- Integrated Minio for object storage and ensured network-level isolation via `datahub-net`.  
- Added health-check, deployment, and test automation scripts for continuous deployment readiness.  
- Designed for modularity and resilience following a lightweight microservices approach.  

---

## Assumptions & Decisions  
- Local testing and validation were done via Docker Desktop (Linux engine).  
- Minio was selected as S3-compatible storage for simplicity and portability.  
- Environment variables are configured through `.env` or defaults for local deployments.  

---

## Known Limitations / Future Improvements  
- Add CI/CD workflow (GitHub Actions or Jenkins).  
- Include persistent Minio volume for production-grade storage.  
- Implement Prometheus + Grafana for metrics and alerting.  

---

## Estimated Time Spent  
Approx. **10â€“12 hours** including testing, debugging, and documentation.  

---

## Testing Instructions  
1. Clone repo:  
   ```bash
   git clone https://github.com/Mkhanyisi09/Mkhanyisi_Repo.git
   cd Mkhanyisi_Repo
   git checkout Mkhanyisi


2.Deploy Locally:

bash bin/deploy.sh

3. Verify health:
 
 bash bin/health-check.sh

4. Test Flask endpoints via
http://127.0.0.1:5000


Day 2 Operations Scenario (Minio Failure)

If Minio becomes unavailable:

Flask app continues to run but data uploads will fail (returns error on Minio API call).

The issue can be detected via:

Health check (bash bin/health-check.sh)

Docker logs or alerting tools.

Recovery steps:

* Restar Minio container
Day 2 Operations Scenario (Minio Failure)

If Minio becomes unavailable:

* Flask app continues to run but data uploads will fail (returns error on Minio API call).

* The issue can be detected via:

* Health check (bash bin/health-check.sh)

* Docker logs or alerting tools.
* Recovery steps:

* Restart Minio container:

docker start minio-server
* If corrupted, redeploy with persistent data volume.
